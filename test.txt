哈哈哈哈
我第二次添加内容
我是第三次添加内容
我是第四添加的内容
修改bug页面

1.git add ‘文件内容’ （把内容添加到git）
2.git commit -m '提交的描述文字'  （把添加的内容提交上去）
3.git status （查看当前仓库的是提交转态，这里会告诉你是执行了add 还是commit 哪个执行了）
4.git diff （如果还没有add，执行git diff可以查看具体修改的内容,执行了add 再执行这行命令看不到任何内容）
5.git log（显示从最近到最远的提交日志）
6.git log --pretty=oneline (显示版本号)
7.git reset --head HEAD^ 回退到上一个版本 HEAD^^ 回退到上上一个版本
8.git reset --hard '版本号' （回退之后还原到上一个版本，此处要知道要会退回去的版本号）
9.git reflog (要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本)
10. git remote add origin https://github.com/shixianyan6020/gitCommitTest.git（把本地的内容添加到远程的github服务器上面）
11.git push origin master (把本地的更改推动到远程的git服务器上面 第一次推送git push -u origin master
)
12.git branch dev (新建dev分支)
   git checkout dev (切换到dev分支)
   git checkout -b '新建分支名字' （新建分支并且切换到新建的分支上）
   git branch(查看当前分支)
   git merge '其它分支' （合并其它分支上的内容到当前分支上）
   git branch -d '删除的分支名字' (删除分支)
13.merge 发生冲突，有时候需要我们手动修改冲突的部分
14.当前有master分支 dev分支，现需要修复一个bug 新建一个issue-bug分支  
	master是我们提交在服务器上的代码，现在在dev上开发了新的功能，还不能发布的内容，这时候要修复bug，
	我们无法直接新建一个issue-bug分支，必须先提交dev分支，但是我们dev分支代码不完成
	这时候我们可以先不提交dev的内容 可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
	1.git status(查看当前分支的提交情况，发现有未提交的内容)
	2.git stash（存贮当前的分支）
	3.git status（查看到当前的分支并没有要提交的内容）
	4.git checkout master(切换到master分支)
	5.git checkout -b issue-bug (新建并且切换到issue-bug分支)
	6.在issue-bug 分支上修改bug
	7.git add issue-bug
	8.git commit -m '修改bug页面'
	9.git checkout master(切换到master分支)
	10.git merge --no-ff -m "merged bug fix 101" issue-bug(在master上合并issue-bug修改的内容)
	11.git checkout dev
	12.git status(查看dev分支的提交情况)
	13.git stash list(查看工作现场存到哪去了)
	14.工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：
		一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；
		另一种方式是用git stash pop，恢复的同时把stash内容也删了：
		git stash pop（恢复dev之前没有保存的提交）
		
		
		
		
		搭建好所军军军军军军军军军军军军军军军军军